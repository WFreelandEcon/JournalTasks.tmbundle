<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"

PENDING   = ENV['TM_BULLET_PENDING'] || '-'
COMPLETED = ENV['TM_BULLET_COMPLETED'] || ' @done'

if ENV['TM_SELECTED_TEXT']
  toggled_text = STDIN.read
  if toggled_text =~ /^(\s*)(-)(.*@done)\n/
    toggled_text.gsub!(/#{Regexp.escape COMPLETED}/) { "" }
  elsif toggled_text =~ /^(\s*)(-)(.*)\n/  # Any pendings? Then check all!
    toggled_text.gsub!(/^(\s*)(-)(.*)\n/) { $1 + $2 + $3 + COMPLETED + "\n" }
  end

#  else  # Uncheck all!
#    toggled_text.gsub!(/#{Regexp.escape COMPLETED}/) { "" }
#  end
  print '${0:' + e_snp(toggled_text) + '}'  # Wrap in selection
else  # Work with current line
  old_line = ENV['TM_CURRENT_LINE']
  if ENV['TM_SCOPE'] =~ /pending/u
	new_line = old_line + COMPLETED
  end
  if ENV['TM_SCOPE'] =~ /completed/u
     new_line = old_line.gsub(/#{Regexp.escape COMPLETED}/) { "" }
  end

  column = ENV['TM_LINE_INDEX'].to_i
  unless $1 &amp;&amp; column &lt;= $1.length  # If we're past the line-initial whitespace,
    column += new_line.length - old_line.length  # compensate for different byte counts
  end
  new_line[column,0] = '${0}'  # Insert caret
  print new_line
end
</string>
	<key>fallbackInput</key>
	<string>line</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>@d</string>
	<key>name</key>
	<string>Toggle Completed</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>text.html.journal</string>
	<key>uuid</key>
	<string>DFD4CBBB-4719-437D-962A-5D5E6727196B</string>
</dict>
</plist>
